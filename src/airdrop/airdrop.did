type CanisterError = variant {
  NoChildrenForCode;
  CannotRegisterMultipleTimes;
  CanisterKilled;
  GeneralError : text;
  Unauthorized : text;
  CodeAlreadyRedeemed;
  CodeNotFound;
  NoCodeForII;
};
type Info = record {
  "principal" : principal;
  code : text;
  ethereum_address : text;
  children : opt vec record { text; bool };
};
type Result = variant { Ok; Err : CanisterError };
type Result_1 = variant { Ok : text; Err : CanisterError };
type Result_2 = variant { Ok : Info; Err : CanisterError };
service : () -> {
  bring_caninster_back_to_life : () -> (Result);
  generate_code : () -> (Result_1);
  get_code : () -> (Result_2) query;
  kill_canister : () -> (Result);
  redeem_code : (text, text) -> (Result_2);
}