//! Bindings to the `cycles_ledger` canister, generated by `./scripts/bind/rust.sh`
//!
//! Binding configuration: `./scripts/bind/rust/cycles_ledger.pic.toml`
//!
//! Adapted from: <https://github.com/dfinity/candid/blob/master/rust/candid_parser/src/bindings/rust_call.hbs>
#![allow(dead_code, unused_imports, clippy::all, clippy::missing_errors_doc)]
use std::sync::Arc;

use candid::{self, decode_args, encode_args, CandidType, Deserialize, Principal};
use pocket_ic::{PocketIc, UserError, WasmResult};

pub use ic_cycles_ledger_types::*;

pub struct CyclesLedgerPic {
    pub pic: Arc<PocketIc>,
    pub canister_id: Principal,
}

impl CyclesLedgerPic {
    pub fn create_canister(
        &self,
        caller: Principal,
        arg0: &CreateCanisterArgs,
    ) -> Result<(Result<CreateCanisterSuccess, CreateCanisterError>,), String> {
        let args = encode_args((arg0,)).expect("Failed to encode update call arguments");
        self.pic
            .update_call(self.canister_id, caller, "create_canister", args)
            .map_err(|e| {
                format!(
                    "Update call error. RejectionCode: {:?}, Error: {}",
                    e.code, e.description
                )
            })
            .and_then(|reply| match reply {
                WasmResult::Reply(reply) => {
                    decode_args(&reply).map_err(|e| format!("Decoding failed: {e}"))
                }
                WasmResult::Reject(error) => Err(error),
            })
    }
}
