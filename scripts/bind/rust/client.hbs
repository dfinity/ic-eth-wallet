//! Bindings to the `{{ canister_name }}` canister, generated by `./scripts/bind/rust.sh`
//!
//! Binding configuration: `./scripts/bind/rust/{{ canister_name }}.client.toml`
//! 
//! Adapted from: <https://github.com/dfinity/candid/blob/master/rust/candid_parser/src/bindings/rust_call.hbs>
#![allow(dead_code, unused_imports, clippy::all, clippy::missing_errors_doc)]
use {{candid_crate}}::{self, CandidType, Deserialize, Principal};
use ic_cdk::api::call::CallResult;

{{#if submodule}}
/// Manually maintained methods
pub mod {{submodule}};
{{/if}}

{{type_defs}}

{{#if methods}}
pub struct {{PascalCase canister_name}}Service(pub Principal);
impl {{PascalCase canister_name}}Service {
  {{#each methods}}
  pub async fn {{this.name}}(&self{{#each this.args}}, {{this.0}}: &{{this.1}}{{/each}}) -> CallResult<({{#each this.rets}}{{this}},{{/each}})> {
    ic_cdk::call(self.0, "{{escape_debug this.original_name}}", ({{#each this.args}}{{this.0}},{{/each}})).await
  }
  {{/each}}
}
{{#if canister_id}}
pub const CANISTER_ID : Principal = Principal::from_slice(&[{{principal_slice canister_id}}]); // {{canister_id}}
pub const {{snake_case canister_name}}_service : {{PascalCase canister_name}}Service = {{PascalCase canister_name}}Service(CANISTER_ID);
{{/if}}
{{/if}}
{{#if tests}}
{{tests}}
{{/if}}
