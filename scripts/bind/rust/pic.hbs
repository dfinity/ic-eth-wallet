//! Bindings to the `{{ canister_name }}` canister, generated by `./scripts/bind/rust.sh`
//!
//! Binding configuration: `./scripts/bind/rust/{{ canister_name }}.pic.toml`
//! 
//! Adapted from: <https://github.com/dfinity/candid/blob/master/rust/candid_parser/src/bindings/rust_call.hbs>
#![allow(dead_code, unused_imports, clippy::all, clippy::missing_errors_doc)]
use std::sync::Arc;

use candid::{self, CandidType, Deserialize, Principal};
use pocket_ic::PocketIc;

use crate::utils::pic_canister::{PicCanister, PicCanisterTrait};

pub use ic_{{snake_case canister_name}}_types::*;

{{#if submodule}}
pub mod {{submodule}};
{{/if}}

{{#if methods}}
pub struct {{PascalCase canister_name}}Pic {
    pub pic: Arc<PocketIc>,
    pub canister_id: Principal,
}

impl {{PascalCase canister_name}}Pic {
  {{#each methods}}
  pub fn {{this.name}}(&self, caller: Principal{{#each this.args}}, {{this.0}}: &{{this.1}}{{/each}}) -> Result<{{vec_to_arity this.rets}}, String> {
    let wasm_result =  self.pic.update_call(self.canister_id, caller, "{{escape_debug this.original_name}}", ({{#each this.args}}{{this.0}}, {{/each}}));
  }
  {{/each}}
}
{{#if canister_id}}
pub const CANISTER_ID : Principal = Principal::from_slice(&[{{principal_slice canister_id}}]); // {{canister_id}}
{{/if}}
{{/if}}
{{#if tests}}
{{tests}}
{{/if}}
